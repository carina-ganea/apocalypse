#version 330

layout (location = 0) in vec3 vertex_position;
layout (location = 1) in vec3 vertex_normal;
layout (location = 2) in vec2 vertex_texture;

out vec3 LightIntensity;
out vec2 TexCoord;
out float Id;

vec3 LightPosition1 = vec3 (0.0, 50.0, 4.0); // Light position in world coords.
vec3 LightPosition2 = vec3(0.0f, 10.0f, 0.0f);

uniform vec3 Ks; // specular reflectance
vec3 Ls1 = vec3 (1.0, 1.0, 1.0); // White specular colour
vec3 Ls2 = vec3 (1.0, 1.0, 0.0); // Yellow specular colour

uniform vec3 Kd; // diffuse surface reflectance
vec3 Ld1 = vec3 (1.0, 1.0, 1.0); // Light source intensity
vec3 Ld2 = vec3 (1.0, 1.0, 1.0); // Light source intensity

uniform vec3 Ka; // ambient reflectance
vec3 La = vec3 (0.1, 0.1, 0.1); // ambient light


uniform float specular_exponent; // specular power


uniform mat4 view;
uniform mat4 proj;
uniform mat4 model;
uniform float id;

void main(){

	TexCoord = vertex_texture;

  mat4 ModelViewMatrix = view * model;
  mat3 NormalMatrix =  mat3(ModelViewMatrix);

  // Convert normal and position to eye coords

  // Normal in view space
  vec3 tnorm = normalize( NormalMatrix * vertex_normal);

  // Position in view space
  vec3 eyeCoords = vec3( ModelViewMatrix * vec4(vertex_position,1.0));

  //normalised vector towards the light source
 vec3 s = normalize(vec3(LightPosition1 - eyeCoords));
  
  vec3 AmbientIntensity = Ka * La;

  vec3 LightPosition1Eye = vec3(ModelViewMatrix * vec4(LightPosition1, 1.0));
  vec3 L = normalize( LightPosition1Eye - eyeCoords);
  vec3 DiffuseIntensity = Ld1 * Kd * max(dot( L, tnorm ), 0.0);

  vec3 r = reflect(-L, tnorm);
  vec3 v = normalize(-eyeCoords);
  float dot_product_specular = max(dot(r,v), 0.0);
  float specular_factor = pow(dot_product_specular, specular_exponent);
  vec3 SpecularIntensity = Ls1 * Ks * specular_factor;


  float distance    = length(LightPosition2 - vertex_position);
  float attenuation = 1.0 / (1 + 0.1 * distance + 
  			     0.032 * (distance * distance));

  vec3 LightPosition2Eye = vec3(ModelViewMatrix * vec4(LightPosition2, 1.0));
  L = normalize( LightPosition2Eye - eyeCoords);
  DiffuseIntensity = DiffuseIntensity + attenuation * (Ld2 * Kd * max(dot( L, tnorm ), 0.0));

  r = reflect(-L, tnorm);
  v = normalize(-eyeCoords);
  dot_product_specular = max(dot(r,v), 0.0);
  specular_factor = pow(dot_product_specular, specular_exponent);
  SpecularIntensity = SpecularIntensity + attenuation * (Ls2 * Ks * specular_factor);
  
  
  // Convert position to clip coordinates and pass along
  gl_Position = proj * view * model * vec4(vertex_position,1.0);

  LightIntensity = AmbientIntensity + SpecularIntensity + DiffuseIntensity;

  Id = id;
}
 